import { Application } from '@/pages/ProcessDesign/core/Application.ts'import { registryEvents } from '@/pages/ProcessDesign/core/Process/utils/registryEvents.ts'import { registryCustomModel } from '@/pages/ProcessDesign/core/Process/utils/registryCustomModel/registry.ts'import { EdgeType } from '@/pages/ProcessDesign/core/Process/processConfig.ts'import LogicFlow from '@logicflow/core'import { CallbackType } from '@logicflow/core/types/event/eventEmitter'import { GraphConfigData, PointTuple, RegisterConfig, RegisterElementFn, ZoomParam } from '@logicflow/core/types/type'import { DndPanel, SelectionSelect, Snapshot, Menu, Control, MiniMap } from '@logicflow/extension'export class Process {    #instance!: LogicFlow    readonly #isEdit: boolean = true    #destroyList: Array<() => void> = []    get #plugins () {        return this.#isEdit ? [ DndPanel, SelectionSelect, Snapshot, Menu, Control, MiniMap ] : [ SelectionSelect, Snapshot, Control, MiniMap ]    }    #init (element: HTMLElement | string): void {        const _element = typeof element === 'string' ? document.querySelector(element) : element        if (!_element) {            throw new Error('element is not exist')        }        const { getWriteableConfig } = this.app.config        this.#instance = new LogicFlow({            container: _element as HTMLElement,            ...this.app.config.defaultConfig,            plugins: this.#plugins,            ...getWriteableConfig,        })    }    public get extension() {        return this.#instance.extension    }    constructor (element: HTMLElement | string, public app: Application, isEdit = true) {        this.app.initProcess(this)        this.#isEdit = isEdit        this.#init(element)        registryCustomModel(this)        this.#destroyList.push(registryEvents(this))    }    /**     * 渲染节点     * @param graphData     */    public render (graphData?: IObj): void {        this.#instance.render(graphData)    }    /* 导出 */    public getSnapshot(fileName?: string, backgroundColor?: string): void {        return this.#instance.getSnapshot(fileName, backgroundColor)    }    /* 修改线的类型 */    public changeEdgeType(id: string, type: EdgeType) {        this.#instance.changeEdgeType(id, type)    }    /* 清空 */    public clearData(): void {        this.#instance.clearData()    }    /* 缩小到最小 */    public getGraphData(): GraphConfigData {       return this.#instance.getGraphData()    }    /* 重制视图缩放 */    public resetZoom(): void {        this.#instance.resetZoom()    }    /* 回到初始位置 */    public resetTranslate(): void {        this.#instance.resetTranslate()    }    public register(type: string | RegisterConfig, fn?: RegisterElementFn, isObserverView?: boolean): void {        this.#instance.register(type, fn, isObserverView)    }    /* true：放大，false：缩小 */    public zoom(zoomSize?: ZoomParam, point?: PointTuple): void {        this.#instance.zoom(zoomSize, point)    }    public on(type: string, callback: CallbackType): Process {        this.#instance.on(type, callback)        return this    }    public off (type: string, callback: CallbackType): Process {        this.#instance.off(type, callback)        return this    }    public emit(type: string, args: any): Process {        this.#instance.emit(type, args)        return this    }    public destroy(): void {        this.#destroyList.forEach(fn => fn())    }    public getNodeModelById(id: string) {        return this.#instance.getNodeModelById(id)    }    public getEdgeModelById(id: string) {        return this.#instance.getEdgeModelById(id)    }    public updateEditConfig(config: any): void {        this.#instance.updateEditConfig(config)    }    public setDefaultEdgeType(type: EdgeType): void {        this.#instance.setDefaultEdgeType(type)    }}