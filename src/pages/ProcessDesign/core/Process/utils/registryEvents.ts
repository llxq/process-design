import { Process } from '@/pages/ProcessDesign/core/Process'import { updateTextInputStyle } from '@/pages/ProcessDesign/core/Process/utils/registryCustomModel/utils.ts'import { OPEN_UPDATE_TEXT_STYLE_PANEL_EVENT } from '@/pages/ProcessDesign/hooks/useCanvas.ts'const keyDownStatus = {    /* 空格 */    space: false,    /* ctrl */    ctrl: false,}const registryKeyDownEvent = (process: Process) => {    const updateKeyStatus = (e: KeyboardEvent, isPressed: boolean): void => {        const { code } = e        if (code === 'Space') {            keyDownStatus.space = isPressed            const selectionSelect = process.extension.selectionSelect            isPressed ? selectionSelect.closeSelectionSelect() : selectionSelect.openSelectionSelect()        } else if (['MetaLeft', 'MetaRight'].includes(code)) {            keyDownStatus.ctrl = isPressed        }    }    const downHandler = (e: KeyboardEvent) => updateKeyStatus(e, true)    const upHandler = (e: KeyboardEvent) => updateKeyStatus(e, false)    window.addEventListener('keydown', downHandler)    window.addEventListener('keyup', upHandler)    return () => {        window.removeEventListener('keydown', downHandler)        window.removeEventListener('keyup', upHandler)    }}const registryZoomEvent = (process: Process) => {    /* 注册鼠标滚轮滚动事件 */    const wheelHandler = (e: WheelEvent) => {        if (keyDownStatus.ctrl) {            /* 向上还是向下 */            const { deltaY } = e            process.zoom(deltaY < 0, [e.pageX - 12, e.pageY - 70])        }    }    window.addEventListener('wheel', wheelHandler)    return () => {        window.removeEventListener('wheel', wheelHandler)    }}const registryUpdateFontStyle = (process: Process) => {    const updateStyle = (model: any): void => {        process.emit(OPEN_UPDATE_TEXT_STYLE_PANEL_EVENT, { model, show: true })        model && updateTextInputStyle(model.getTextStyle())    }    const nodeDBClick = (e: any) => {        const { data: { id } = { id: void 0 } } = e        if (!id) return        const model = process.getNodeModelById(id)        updateStyle(model)    }    process.on('node:dbclick', nodeDBClick)    const edgeDbClick = (e: any) => {        const { data: { id } = { id: void 0 } } = e        if (!id) return        const model = process.getEdgeModelById(id)        updateStyle(model)        updateTextInputStyle({ backgroundColor: '#fff' })    }    process.on('edge:dbclick', edgeDbClick)    const blankClickHandler = () => {        process.emit(OPEN_UPDATE_TEXT_STYLE_PANEL_EVENT, { model: void 0, show: false, position: { x: 0, y: 0 } })        updateTextInputStyle({ backgroundColor: 'transparent' })    }    process.on('blank:click', blankClickHandler)    return () => {        process.off('node:dbclick', nodeDBClick)        process.off('blank:click', blankClickHandler)        process.off('edge:dbclick', edgeDbClick)    }}export const registryEvents = (process: Process): () => void => {    const unRegistryKeyDown = registryKeyDownEvent(process)    const unRegistryZoom = registryZoomEvent(process)    const unRegistryUpdateFontStyle = registryUpdateFontStyle(process)    return () => {        unRegistryKeyDown()        unRegistryZoom()        unRegistryUpdateFontStyle()    }}