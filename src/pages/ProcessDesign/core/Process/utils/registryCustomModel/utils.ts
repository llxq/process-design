/* 统一修改样式 */import { Process } from '@/pages/ProcessDesign/core/Process'import {    defaultProcessNodeConfig,    EdgeType,    ProcessNodeType} from '@/pages/ProcessDesign/core/Process/processConfig.ts'import { OPEN_UPDATE_TEXT_STYLE_PANEL_EVENT } from '@/pages/ProcessDesign/hooks/useCanvas.ts'import BaseNodeModel from '@logicflow/core/types/model/node/BaseNodeModel'import { RectResize } from '@logicflow/extension'export const getTextInput = () => document.querySelector('.canvas__content .lf-tool-overlay .lf-text-input') as HTMLInputElementexport const updateTextInputStyle = (style: IObj): void => {    queueMicrotask(() => {        const input = getTextInput()        if (input && style) {            Object.assign(input.style, style)        }    })}export const isRectResize = (type: ProcessNodeType) => [ProcessNodeType.RECT].includes(type)export const isEllipseResize = (type: ProcessNodeType) => [ProcessNodeType.CIRCLE, ProcessNodeType.ELLIPSE].includes(type)export const isDiamondResize = (type: ProcessNodeType) => [ProcessNodeType.DIAMOND, ProcessNodeType.POLYGON].includes(type)export const isHtmlResize = (type: ProcessNodeType) => [ProcessNodeType.TEXT].includes(type)export const isLineResize = (type: EdgeType) => [EdgeType.BEZIER, EdgeType.POLYLINE].includes(type)function observerEditText <T extends BaseNodeModel>(this: T, data: any, process: Process): void {    const graphModel = this.graphModel    if (Reflect.has(graphModel, 'editText')) {        const editText = graphModel.editText.bind(graphModel)        // eslint-disable-next-line @typescript-eslint/no-this-alias        const modelInstance = this        graphModel.editText = (id: string) => {            editText(id)            if (id === modelInstance.id) {                let model                if (isLineResize(data.type)) {                    model = process.getEdgeModelById(id)                } else {                    model = process.getNodeModelById(id)                }                if (model) {                    process.emit(OPEN_UPDATE_TEXT_STYLE_PANEL_EVENT, { model, show: true })                    const baseType = modelInstance.BaseType                    updateTextInputStyle({                        ...model.getTextStyle(),                        backgroundColor: baseType === 'node' ? 'transparent' : '#fff',                    })                }            }        }    }}export const createUpdateStyleWrapper = (Instance: any, process: Process) => {    return class extends Instance {        /* 自定义文本颜色 */        public get customTextStyle () {            return this.properties.customTextStyle ?? {}        }        public initEdgeData(data: any) {            super.initEdgeData(data)            this.setProperty('customTextStyle', data.properties.customTextStyle)            observerEditText.call(this as any, data, process)        }        public updateTextStyle(key: string, value: string) {            const properties = this.properties            this.setProperty('customTextStyle', { ...properties.customTextStyle, [key]: value })        }        public getTextStyle(): IObj {            const textStyle = super.getTextStyle()            return {                ...textStyle,                ...this.customTextStyle,            }        }    }}export const createResizeModelAndView = (ViewClass: any, type: ProcessNodeType, process: Process, modifyModel: (model: any, defaultConfig: any) => void) => {    const defaultConfig = defaultProcessNodeConfig[type]    return {        view: ViewClass.view,        model: class extends createUpdateStyleWrapper(ViewClass.model, process) {            public initNodeData (data: any) {                super.initNodeData(data)                modifyModel(this, defaultConfig)                this.minHeight = 10                this.minWidth = 20                observerEditText.call(this as any, data, process)            }            public getResizeOutlineStyle () {                const hasFill = ViewClass === RectResize && ![ProcessNodeType.REMARK].includes(type)                return {                    stroke: '#158DFF',                    strokeWidth: 2,                    strokeDasharray: ViewClass === RectResize ? '0' : '4', // RectResize has no dasharray                    fill: hasFill ? '#fff' : 'transparent',   // RectResize has fill property                }            }        }    }}