import { Process } from '@/pages/ProcessDesign/core/Process'import { EdgeType, ProcessNodeType } from '@/pages/ProcessDesign/core/Process/processConfig.ts'import {    createResizeModelAndView,    createUpdateStyleWrapper,    isDiamondResize,    isEllipseResize,    isHtmlResize,    isRectResize} from '@/pages/ProcessDesign/core/Process/utils/registryCustomModel/utils.ts'import { BezierEdge, BezierEdgeModel, PolylineEdge, PolylineEdgeModel } from '@logicflow/core'import { DiamondResize, EllipseResize, HtmlResize, RectResize } from '@logicflow/extension'const useResizeModelAndView = (type: ProcessNodeType, process: Process) => {    if (isRectResize(type)) {        return createResizeModelAndView(RectResize, type, process, (model, config) => {            model.width = config?.width || model.width            model.height = config?.height || model.height        })    } else if (isEllipseResize(type)) {        return createResizeModelAndView(EllipseResize, type, process, (model, config) => {            model.rx = config?.width || model.width // rx is used for Ellipse            model.ry = config?.height || model.height // ry is used for Ellipse        })    } else if (isDiamondResize(type)) {        return createResizeModelAndView(DiamondResize, type, process, (model, config) => {            model.rx = config?.width || model.width // Diamond uses rx, ry too            model.ry = config?.height || model.height        })    } else if (isHtmlResize(type)) {        return createResizeModelAndView(HtmlResize, type, process, (model, config) => {            model.width = config?.width || model.width            model.height = config?.height || model.height        })    }}export const registryResize = (process: Process): void => {    Object.values(ProcessNodeType).forEach(type => {        const params = useResizeModelAndView(type, process)        if (params) {            process.register({                type,                ...params,            })        }    })}export const registryEdge = (process: Process): void => {    Object.values(EdgeType).forEach(value => {        const isPolyline = value === EdgeType.POLYLINE        process.register({            type: value,            view: isPolyline ? PolylineEdge : BezierEdge,            model: isPolyline ? createUpdateStyleWrapper(PolylineEdgeModel, process) : createUpdateStyleWrapper(BezierEdgeModel, process),        })    })}