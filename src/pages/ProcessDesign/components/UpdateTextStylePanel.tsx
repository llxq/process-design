import { fontSizeList } from '@/pages/ProcessDesign/core/Process/processConfig.ts'import { getTextInput } from '@/pages/ProcessDesign/core/Process/utils/registryCustomModel/utils.ts'import {    BoldOutlined,    ItalicOutlined,    UnderlineOutlined,    FontColorsOutlined,    FontSizeOutlined,    AlignLeftOutlined,    AlignCenterOutlined,    AlignRightOutlined} from '@ant-design/icons'import { Dropdown, ColorPicker } from 'antd'import type { Color } from 'antd/es/color-picker'import { useEffect, useState } from 'react'import '../assets/styles/updateTextStylePanel.scss'export interface IUpdateTextStylePanelProps {    model: {        updateTextStyle: (key: string, value: string) => void        customTextStyle: IObj    }}const UpdateTextStylePanel = (props: Partial<IUpdateTextStylePanelProps>) => {    const [fontSizeMenus] = useState(fontSizeList)    const inputColor = getTextInput().style.color    const [color, setColor] = useState<Color>(inputColor as unknown as Color)    const [position, setPosition] = useState({ x: 0, y: 0 })    const updateColor = (c: Color): void => {        setColor(c)        updateStyle('color', c.toHexString())    }    const input = getTextInput()    useEffect(() => {        if (input) {            const { left, top } = input.getBoundingClientRect()            setPosition({ x: left, y: top })        }    }, [])    const updateStyle = (key: string, value: string, isClear = false): void => {        if (props.model) {            const { customTextStyle = {} } = props.model            const originValue = Reflect.get(customTextStyle, key)            const updateStyle = isClear ? originValue === value ? '' : value : value            props.model.updateTextStyle(key, updateStyle)            if (input) {                Object.assign(input.style, props.model.customTextStyle ?? {})            }        }    }    return (        <div className="update-text-style-panel__container flex"             style={ { left: position.x - 100, top: position.y - 50 } }>            {/* update font size */ }            <Dropdown menu={ {                items: fontSizeMenus?.map(m => {                    return {                        key: m.key,                        label: <span onClick={ () => {                            updateStyle('fontSize', m.key)                        } }>{ m.label }</span>,                    }                })            } } placement="bottom" arrow rootClassName="update-text-style__dropdown" trigger={ ['click'] }>                <div className="update-text-style-panel__item">                    <FontSizeOutlined />                </div>            </Dropdown>            {/* update color */ }            <ColorPicker value={ color } onChange={ updateColor } allowClear defaultValue={ color } placement="top">                <div className="update-text-style-panel__item">                    <FontColorsOutlined />                </div>            </ColorPicker>            {/* update text left */ }            <div className="update-text-style-panel__item" onClick={ () => updateStyle('text-align', 'left', true) }>                <AlignLeftOutlined />            </div>            {/* update text center */ }            <div className="update-text-style-panel__item" onClick={ () => updateStyle('text-align', 'center', true) }>                <AlignCenterOutlined />            </div>            {/* update text right */ }            <div className="update-text-style-panel__item" onClick={ () => updateStyle('text-align', 'right', true) }>                <AlignRightOutlined />            </div>            {/* update bold */ }            <div className="update-text-style-panel__item" onClick={ () => updateStyle('fontWeight', 'bold', true) }>                <BoldOutlined />            </div>            {/* update italic */ }            <div className="update-text-style-panel__item" onClick={ () => updateStyle('fontStyle', 'italic', true) }>                <ItalicOutlined />            </div>            {/* update underline */ }            <div className="update-text-style-panel__item"                 onClick={ () => updateStyle('textDecoration', 'underline', true) }>                <UnderlineOutlined />            </div>        </div>    )}export default UpdateTextStylePanel