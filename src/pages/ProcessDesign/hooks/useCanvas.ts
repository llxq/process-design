import { IUpdateTextStylePanelProps } from '@/pages/ProcessDesign/components/UpdateTextStylePanel.tsx'import { Application } from '@/pages/ProcessDesign/core/Application.ts'import { Process } from '@/pages/ProcessDesign/core/Process'import { initPlugins, initPreviewPlugins } from '@/pages/ProcessDesign/core/Process/utils/initPlugins.ts'import { useEffect, useRef, useState } from 'react'export const OPEN_UPDATE_TEXT_STYLE_PANEL_EVENT = 'custom:open-update-text-style-panel'export const useCanvas = (props: { app: Application, isEdit?: boolean }) => {    const contentRef = useRef<HTMLDivElement>(null)    const [showUpdateTextStylePanel, setShowUpdateTextStylePanel] = useState(false)    const [ activeNodeParams, setActiveNodeId ] = useState<IUpdateTextStylePanelProps>()    const showPanel = (data: IUpdateTextStylePanelProps & { show: boolean }) => {        const { show, ...rest } = data        setShowUpdateTextStylePanel(show)        setActiveNodeId(rest)    }    const init = (): () => void => {        try {            const process = new Process(contentRef.current!, props.app, props.isEdit)            if (!props.isEdit) {                initPreviewPlugins(process)            } else {                initPlugins(process)            }            const data = JSON.parse(localStorage.getItem('data')!)            process.render(data)            if (!props.isEdit) {                process.updateEditConfig({ isSilentMode: true })            }            const { right } = contentRef.current?.getBoundingClientRect() ?? {}            process.extension.miniMap.show(right! - 183, 80)            process.on(OPEN_UPDATE_TEXT_STYLE_PANEL_EVENT, showPanel)            return () => {                process.destroy()                process.off(OPEN_UPDATE_TEXT_STYLE_PANEL_EVENT, showPanel)            }        } catch (e) {            console.error(e)        }        return () => void 0    }    useEffect(() => {        if (contentRef.current) {            return init()        }    }, [])    return {        contentRef,        showUpdateTextStylePanel,        activeNodeParams,    }}