type CallBack = (...args: any) => voidtype RunOptions = {    // 冒泡    bubble?: boolean    /* 是否立即执行 */    immediate?: boolean    /* event的options */    eventOptions?: AddEventListenerOptions}const isCallBack = <T extends (...args: any) => any>(type: unknown): type is T => typeof type === 'function'const resizeObserver = (element: HTMLElement, callback: ResizeObserverCallback): CallBack => {    const observer = new ResizeObserver(callback)    observer.observe(element)    return () => observer.unobserve(element)}const resizeEvent = (element: HTMLElement, callBack: CallBack, options?: RunOptions): CallBack => {    element.addEventListener('resize', callBack, options?.bubble ?? options?.eventOptions)    return () => element.removeEventListener('resize', callBack)}/** * 监听dom大小变化 * @param element 监听的dom * @param callback 大小变化之后的回调 * @param options event的参数 * @return 返回一个取消监听的方法 */export const domObserver = (element: HTMLElement, callback: CallBack, options?: RunOptions): CallBack => {    if (!isCallBack(callback)) {        throw new Error('callback is illegal')    }    if (Reflect.has(window, 'ResizeObserver') && typeof ResizeObserver === 'function') {        return resizeObserver(element, callback)    }    return resizeEvent(element, callback, options)}